import { Telegraf } from "telegraf";
import { IBotContext } from "../context/context.interface";
import { Action } from "./action.class";
import { deleteMessageBot } from "../utils/helper.utils";
import { wish } from "../utils/base.utils";

export class ShowWishesAction extends Action {

    constructor(bot: Telegraf<IBotContext>) { super(bot); }


    handle(): void {
        this.bot.action('showWishes', async (ctx) => {
            await deleteMessageBot(ctx);

            const getRiddle = ctx.session.openRiddles.find(el => !el.success) || null;
            const getWishes = ctx.session.openWishes.filter(el => !el.success);

            let userMessage;

            const inlineKeyboard = [[{ text: '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚ôª', callback_data: 'showWishes'}], [{ text: '–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üìÉ', callback_data: 'showInfo' }]];
            if (getRiddle) {
                inlineKeyboard.unshift([{ text: '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–∞–¥–∫—É üí¨', callback_data: 'showRiddle' }]);
            }

            if (getWishes.length > 0) {
                let wishesMessage = "<b>–ó–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: </b>\n\n";
                for (let i = 0; i < getWishes.length; i++) {
                    const getWishesObject = wish.getWish(getWishes[i].id);
                    wishesMessage += "<b>" + (i + 1) + ". </b>" + getWishesObject?.getText + "\n";
                }

                userMessage = await ctx.sendMessage(
                    wishesMessage,
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: inlineKeyboard
                        }
                    }
                );
            } else {
                userMessage = await ctx.sendMessage(
                    "<b>‚ùó –û–®–ò–ë–ö–ê ‚ùó</b>\n–£ —Ç–µ–±—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç—É –∑–∞–¥–∞–Ω–∏–π" + (getRiddle ? ", –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –≤–∑—è—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É ü§°" : " üòí"),
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: inlineKeyboard
                        }
                    }
                );
            }

            ctx.session.selectRiddle = null;
            ctx.session.botMessage = userMessage ? userMessage.message_id : null;
        });
    }

}