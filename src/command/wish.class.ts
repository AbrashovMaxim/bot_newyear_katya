import {Command} from "./command.class";
import {Telegraf} from "telegraf";
import {IBotContext, SessionData} from "../context/context.interface";
import {config, riddle, session, wish} from "../utils/base.utils";
import {deleteMessageBot} from "../utils/helper.utils";

export class WishCommand extends Command {

    constructor(bot: Telegraf<IBotContext>) { super(bot); }


    handle(): void {
        this.bot.command("wish", async (ctx) => {
            await ctx.deleteMessage(ctx.message.message_id);

            if (ctx.message.from.id == config.ADMIN_ID) {
                const split = ctx.message.text.split(' ');
                if (split.length == 2) {
                    await deleteMessageBot(ctx);

                    const id = parseInt(split[1]);

                    const userSession = session.getSession(config.USER_ID + ':' + config.USER_ID) as SessionData;

                    const inlineKeyboard = [[{text: '–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üìÉ', callback_data: 'showInfo'}]];
                    if (userSession.openWishes.filter(el => !el.getSuccess).length > 0) {
                        inlineKeyboard.unshift([{text: '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è üç≠', callback_data: 'showWishesAdmin'}]);
                    }
                    if (userSession.openRiddles.filter(el => !el.getSuccess).length > 0) {
                        inlineKeyboard.unshift([{text: '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–∞–¥–∫–∏ üí¨', callback_data: 'showRiddlesAdmin'}]);
                    }

                    if (!wish.getAllWishes().includes(id)) {
                        const message = await ctx.sendMessage(
                            "<b>‚ùó –û–®–ò–ë–ö–ê ‚ùó</b>\n–¢–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è <b>–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b> <b>ID: " + id + "</b>",
                            {
                                parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: inlineKeyboard
                                }
                            }
                        );
                        ctx.session.botMessage = message.message_id;
                        return;
                    }

                    const successWish = userSession.openWishes.find(wish => wish.getId == id);
                    if (successWish == null) {
                        const message = await ctx.sendMessage(
                            "<b>‚ùó –û–®–ò–ë–ö–ê ‚ùó</b>\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>–Ω–µ—Ç—É</b> —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è <b>ID: " + id + "</b>",
                            {
                                parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: inlineKeyboard
                                }
                            }
                        );
                        ctx.session.botMessage = message.message_id;
                        return;
                    }


                    if (successWish.getSuccess) {
                        const message = await ctx.sendMessage(
                            "<b>‚ùó –û–®–ò–ë–ö–ê ‚ùó</b>\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>–≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b> –¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ <b>ID: " + id + "</b>",
                            {
                                parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: inlineKeyboard
                                }
                            }
                        );
                        ctx.session.botMessage = message.message_id;
                        return;
                    }

                    const message = await ctx.sendMessage(
                        "<b>‚úÖ –£–°–ü–ï–®–ù–û ‚úÖ</b>\n–ó–∞–¥–∞–Ω–∏–µ <b>ID: " + id + " - –í–´–ü–û–õ–ù–ï–ù–û</b>!",
                        {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: inlineKeyboard
                            }
                        }
                    );
                    ctx.session.botMessage = message.message_id;
                    successWish.setSuccess = true;
                }
            }
        });
    }
}