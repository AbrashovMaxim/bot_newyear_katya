import { Command } from "./command.class";
import { IBotContext, SessionData } from "../context/context.interface";
import { Telegraf } from "telegraf";
import { config, session } from "../utils/base.utils";
import { deleteMessageBot } from "../utils/helper.utils";

export class RemindCommand extends Command {

    constructor(bot: Telegraf<IBotContext>) { super(bot); }


    handle(): void {
        this.bot.command("remind", async (ctx) => {
            await ctx.deleteMessage(ctx.message.message_id);

            await deleteMessageBot(ctx);

            if (ctx.message.from.id == config.ADMIN_ID) {
                let message;

                const userSession = session.getSession(config.USER_ID + ':' + config.USER_ID) as SessionData;

                const activateRiddle = userSession.openRiddles.filter(el => !el.success);

                if (activateRiddle.length > 0) {
                    if (userSession.botMessage) {
                        await this.bot.telegram.deleteMessage(config.USER_ID, userSession.botMessage);
                        userSession.botMessage = null;
                    }

                    message = await ctx.sendMessage("<b>‚úÖ –£–°–ü–ï–®–ù–û ‚úÖ</b>\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", { parse_mode: 'HTML' });

                    const userMessage = await this.bot.telegram.sendMessage(
                        config.USER_ID,
                        "<b>‚ùó –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï ‚ùó</b>\n–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–≥–∞–¥–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞, –ª–∏–±–æ, —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ <b>–Ω–æ–≤—ã–π –≥–æ–¥</b> üôÉ",
                        {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        { text: '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–∞–¥–∫—É üí¨', callback_data: 'showRiddle' },
                                    ],
                                    [
                                        { text: '–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üìÉ', callback_data: 'showInfo' }
                                    ]
                                ]
                            }
                        }
                    );

                    userSession.selectRiddle = null;
                    userSession.botMessage = userMessage.message_id;


                } else {
                    message = await ctx.sendMessage("<b>‚ùó –û–®–ò–ë–ö–ê ‚ùó</b>\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç—É –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –∑–∞–≥–∞–¥–æ–∫!", { parse_mode: 'HTML' });
                }

                ctx.session.botMessage = message.message_id;
            }
        });
    }

}